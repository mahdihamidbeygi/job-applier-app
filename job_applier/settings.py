"""
Django settings for job_applier project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path
from typing import Any

import dj_database_url
from dotenv import load_dotenv

load_dotenv()


APP_NAME = "job-applier-app"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR: Path = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Detect if we're running in GitHub Codespaces
IN_CODESPACES = os.environ.get("CODESPACES", "false").lower() == "true"
CODESPACE_NAME = os.environ.get("CODESPACE_NAME", "")
GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN = os.environ.get(
    "GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN", ""
)

# Configure ALLOWED_HOSTS
ALLOWED_HOSTS = [
    f"{APP_NAME}.fly.dev",
    "localhost",
    "127.0.0.1",
]

# Application definition
INSTALLED_APPS: list[str] = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "widget_tweaks",
    "rest_framework",
    "rest_framework_simplejwt",
    "storages",
    "django_filters",
    "drf_spectacular",
    "corsheaders",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.github",
    "core.apps.CoreConfig",
]

MIDDLEWARE: list[str] = [
    "django.middleware.security.SecurityMiddleware",
    # "whitenoise.middleware.WhiteNoiseMiddleware",  # Should be early in the list
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # Required for django-allauth
]

ROOT_URLCONF = "job_applier.urls"

TEMPLATES: list[dict[str, Any]] = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
            os.path.join(BASE_DIR, "core/templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "job_applier.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    "default": dj_database_url.config(
        default=os.getenv("DATABASE_URL"),
        conn_max_age=600,
    )
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS: list[dict[str, str]] = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL = "static/"
STATIC_ROOT: str = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS: list[str] = [
    os.path.join(BASE_DIR, "static"),
]
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT: str = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Authentication settings
AUTHENTICATION_BACKENDS: list[str] = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

SITE_ID = 1

# AllAuth settings
ACCOUNT_SIGNUP_FIELDS: list[str] = ["email*", "password1*", "password2*"]
ACCOUNT_LOGIN_METHODS: set[str] = {"email"}
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_EMAIL_SUBJECT_PREFIX = "[Job Applier] "
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3

LOGIN_URL = "account_login"
LOGIN_REDIRECT_URL = "core:profile"
LOGOUT_REDIRECT_URL = "core:home"

# ===========================
# NON-SENSITIVE CONFIGURATION
# ===========================

# AWS S3 Configuration (non-sensitive parts)
AWS_S3_REGION_NAME = "us-east-1"
AWS_STORAGE_BUCKET_NAME = "job-applier-files"
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
AWS_S3_VERIFY = True
AWS_S3_SIGNATURE_VERSION = "s3v4"

# Pinecone Configuration (non-sensitive parts)
PINECONE_ENVIRONMENT = "us-east-1"
PINECONE_INDEX = "jobapplier"
PINECONE_HOST = os.getenv(
    "PINECONE_HOST", "https://jobapplier-p993bwh.svc.aped-4627-b74a.pinecone.io"
)

# Model Configuration
OPENAI_MODEL = "gpt-4-turbo-preview"
GROK_MODEL = "grok-2-1212"
GOOGLE_MODEL = "gemini-2.5-flash-preview-04-17"

# OAuth Client IDs (these are public)
GOOGLE_CLIENT_ID = "282027751559-r0ocro82n0n6ibftimraa331gogpa399.apps.googleusercontent.com"
GITHUB_CLIENT_ID = "Ov23li8zHEpBhxA22rFa"
LINKEDIN_CLIENT_ID = "78tdz1i9cak3fw"

# Email Configuration (non-sensitive parts)
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True

# ===========================
# SENSITIVE CONFIGURATION (from environment)
# ===========================

# AWS S3 Credentials
AWS_ACCESS_KEY_ID: str | None = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY: str | None = os.getenv("AWS_SECRET_ACCESS_KEY")

# API Keys
OPENAI_API_KEY: str | None = os.getenv("OPENAI_API_KEY")
PINECONE_API_KEY: str | None = os.getenv("PINECONE_API_KEY")
TOKEN_GITHUB: str | None = os.getenv("TOKEN_GITHUB")
GROK_API_KEY: str | None = os.getenv("GROK_API_KEY")
GOOGLE_API_KEY: str | None = os.getenv("GOOGLE_API_KEY")

# OAuth Secrets
GOOGLE_CLIENT_SECRET: str | None = os.getenv("GOOGLE_CLIENT_SECRET")
CLIENT_SECRET_GITHUB: str | None = os.getenv("CLIENT_SECRET_GITHUB")
LINKEDIN_CLIENT_SECRET: str | None = os.getenv("LINKEDIN_CLIENT_SECRET")

# Email Credentials
EMAIL_HOST_USER: str | None = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD: str | None = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL: str | None = os.getenv("DEFAULT_FROM_EMAIL", "noreply@jobapplier.com")
SERVER_EMAIL: str | None = os.getenv("DEFAULT_FROM_EMAIL", "noreply@jobapplier.com")

# LinkedIn Credentials
LINKEDIN_EMAIL: str | None = os.getenv("LINKEDIN_EMAIL")
LINKEDIN_PASSWORD: str | None = os.getenv("LINKEDIN_PASSWORD")

# LangSmith Configuration
LANGSMITH_API_KEY: str | None = os.getenv("LANGSMITH_API_KEY")
LANGSMITH_TRACING: str = os.getenv("LANGSMITH_TRACING", "false")
LANGSMITH_ENDPOINT: str = os.getenv("LANGSMITH_ENDPOINT", "https://api.smith.langchain.com")
LANGSMITH_PROJECT: str = os.getenv("LANGSMITH_PROJECT", "job_applier_app")

# Use S3 for media files
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {},
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# REST Framework settings
REST_FRAMEWORK: dict[str, Any] = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# JWT Settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=24),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
}

# Spectacular settings
SPECTACULAR_SETTINGS: dict[str, Any] = {
    "TITLE": "Job Applier API",
    "DESCRIPTION": "API for managing user profiles and job applications",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "COMPONENT_SPLIT_REQUEST": True,
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOperationId": True,
        "filter": True,
    },
}

TEMPERATURE = 0.0

# Security Settings
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG
SECURE_HSTS_PRELOAD = not DEBUG

# CORS settings
CORS_ALLOW_ALL_ORIGINS = DEBUG
CORS_ALLOW_CREDENTIALS = True

# Update CORS and CSRF for production
CORS_ALLOWED_ORIGINS = [
    "https://job-applier-app.fly.dev",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# Base CSRF origins
CSRF_TRUSTED_ORIGINS = [
    "https://job-applier-app.fly.dev",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]


# CSRF settings
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SAMESITE = "Lax"
CSRF_USE_SESSIONS = False
CSRF_COOKIE_NAME = "csrftoken"
CSRF_HEADER_NAME = "HTTP_X_CSRFTOKEN"


# Celery Configuration
CELERY_BROKER_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = os.getenv("REDIS_URL", "redis://localhost:6379/0")
USE_CELERY_FOR_RESUMES = True
CELERY_ACCEPT_CONTENT: list[str] = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE

# Flower Configuration
FLOWER_BASIC_AUTH = os.getenv("FLOWER_BASIC_AUTH", "admin:flower123")

# Google API Settings
FAST_GOOGLE_MODEL: str | None = os.environ.get("FAST_GOOGLE_MODEL")
PRO_GOOGLE_MODEL: str | None = os.environ.get("PRO_GOOGLE_MODEL")
GOOGLE_API_KEY: str | None = os.environ.get("GOOGLE_API_KEY")
ANTHROPIC_API_KEY = os.environ.get("ANTHROPIC_API_KEY", "")

# URLField default scheme
FORMS_URLFIELD_ASSUME_HTTPS = True

# Logging for production
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

# Social Account Providers
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "OAUTH_PKCE_ENABLED": True,
        "APP": {
            "client_id": GOOGLE_CLIENT_ID,
            "secret": os.getenv("GOOGLE_CLIENT_SECRET"),
        },
    },
    "github": {
        "SCOPE": [
            "user:email",
        ],
        "APP": {
            "client_id": GITHUB_CLIENT_ID,
            "secret": os.getenv("CLIENT_SECRET_GITHUB"),
        },
    },
}

# Trust Fly.io's proxy headers
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Only redirect to HTTPS if not behind a proxy
SECURE_SSL_REDIRECT = False  # Fly.io handles this
