generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  applications  JobApplication[]
  savedJobs     SavedJob[]
  profile       UserProfile?
  oldProfile    Profile?        @relation("oldProfile")
}

model Job {
  id           String           @id @default(cuid())
  platform     String
  externalId   String
  title        String
  company      String
  location     String?
  description  String
  salary       String?
  jobType      String?
  url          String
  postedAt     DateTime
  isExternal   Boolean          @default(false)
  applications JobApplication[]
  savedJobs    SavedJob[]

  @@unique([platform, externalId])
}

model JobApplication {
  id          String   @id @default(cuid())
  userId      String
  jobId       String
  status      String   @default("APPLIED")
  notes       String?
  resumeUsed  String?
  coverLetter String?
  appliedAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  job         Job      @relation(fields: [jobId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([jobId])
}

model SavedJob {
  id      String   @id @default(cuid())
  userId  String
  jobId   String
  savedAt DateTime @default(now())
  job     Job      @relation(fields: [jobId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@unique([userId, jobId])
}

model UserProfile {
  id            String          @id @default(cuid())
  userId        String          @unique
  name          String
  email         String
  phone         String?
  location      String?
  summary       String?         @db.Text
  resumeUrl     String?
  linkedinUrl   String?
  githubUrl     String?
  portfolioUrl  String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  experience    Experience[]
  education     Education[]
  skills        Skill[]
  publications  Publication[]
  certifications Certification[]
}

model Experience {
  id          String      @id @default(cuid())
  title       String
  company     String
  location    String
  startDate   DateTime
  endDate     DateTime?
  description String      @db.Text
  userId      String
  userProfile UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Education {
  id          String      @id @default(cuid())
  school      String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  description String?     @db.Text
  userId      String
  userProfile UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Skill {
  id          String      @id @default(cuid())
  name        String
  level       String?
  userId      String
  profile     UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Profile {
  id                String          @id @default(cuid())
  userId            String          @unique
  user              User            @relation("oldProfile", fields: [userId], references: [id])
  resume            String?   // URL to stored resume
  linkedInUrl       String?
  githubUrl         String?
  portfolioUrl      String?
  bio               String?   @db.Text
  skills            String[]
  resumeLastUpdated DateTime?
  isProfileComplete Boolean   @default(false)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Publication {
  id          String      @id @default(cuid())
  title       String
  publisher   String
  date        DateTime?
  description String?     @db.Text
  url         String?
  userId      String
  profile     UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Certification {
  id          String      @id @default(cuid())
  name        String
  issuer      String
  date        DateTime?
  url         String?
  userId      String
  profile     UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}
